<?xml version="1.0"?>
<launch>
  <arg name='origin' default='-x 0 -y 0 -z 0.005'/>
  <arg name='robot_name' default='ur5'/>
  <arg name="limited" default="false"  doc="If true, limits joint range [-PI, PI] on all joints." />
  <arg name="paused" default="true" doc="Starts gazebo in paused mode" />
  <arg name="gui" default="true" doc="Starts gazebo gui" />
  <arg name="mode" default="position"/>

  <!-- send robot urdf to param server -->
  <include file="$(find ur_e_description)/launch/ur5e_upload.launch">
    <arg name="limited" value="false"/>
  </include>
  
  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model $(arg robot_name) $(arg origin) -model $(arg robot_name) -J shoulder_lift_joint -1.5 -J elbow_joint 1.0 -J wrist_2_joint 1.57" respawn="false" output="screen" />

  <!-- startup simulated world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" default="worlds/empty.world"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="gui" value="$(arg gui)"/>
    </include>

  <group if="$(eval arg('mode') == 'position')">
    <rosparam file="$(find ur_e_gazebo)/controller/ur5_controller_params.yaml" command="load"/>
  </group>

  <group unless="$(eval arg('mode') == 'position')">
    <rosparam file="$(find ur_e_gazebo)/controller/ur5_vel_controller.yaml" command="load"/>
    <node name="vel" pkg="vel" type="vel.py" output="screen"/>
  </group>

  <rosparam file="$(find ur_e_gazebo)/controller/gripper_controller_robotiq.yaml" command="load"/>

  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="true" output="screen" args="gripper shoulder_pan_joint_position_controller shoulder_lift_joint_position_controller elbow_joint_position_controller wrist_1_joint_position_controller wrist_2_joint_position_controller wrist_3_joint_position_controller joint_state_controller" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
  respawn="false" output="screen">
  </node>

  <node name="controller" pkg="nodes" type="prueba.py" output="screen"/>  

  
</launch>
